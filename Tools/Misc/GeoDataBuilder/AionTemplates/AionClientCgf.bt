//--------------------------------------
//--- 010 Editor v4.0.1 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

#include "AionCommon.bt"

typedef struct {
    POINT_3D pos;
    POINT_3D norm;
} CGF_VERTEX;

typedef struct {
    DWORD v[3];
    DWORD may[2];
} CGF_INDEX;

typedef struct {
    DWORD dummy[5];
    DWORD verticesCount;
    DWORD uvsCount;
    DWORD indicesCount;
    DWORD vertAnimRef;
    CGF_VERTEX vertex[verticesCount];
    CGF_INDEX  index[indicesCount];
} CGF_MESH_DATA;

typedef struct {
    local string title;
    DWORD chunkType <format=hex>;
	if (chunkType == 0xCCCC0000) // Mesh
	{
        title = "Mesh";
		DWORD chunkVersion;
		DWORD chunkOffset <format=hex>;
		DWORD chunkId;

        local int64 pos = FTell();
        FSeek(chunkOffset);
        CGF_MESH_DATA mesh;
        FSeek(pos);
	}
	else
	{
        title = "Unknown";
		DWORD dummy[3]; // unknown data
	}
} CGF_CHUNK_DATA <read=CgfChunkDataRead>;

string CgfChunkDataRead(CGF_CHUNK_DATA &data)
{
    return data.title;
}

typedef struct {
    CHAR signature[8];
    Assert(signature == "NCAion", "Wrong signature: " + signature);
    DWORD fileType <format=hex>;
    if (fileType == 0xFFFF0000)
    {
        DWORD dummy;
        DWORD tableOffset <format=hex>;
        FSeek(tableOffset); // move to the chunks table
        DWORD chunksCount;
        CGF_CHUNK_DATA chunks[chunksCount] <optimize=false>;
    }
    else if (fileType != 0xFFFF0001)
        Assert(0, "Unsupported file type.");
} CGF_DATA;

CGF_DATA cgfData;
